// Calculate a rolling average for an array
function rollingAverage(arr, windowPeriod = 10) {
  // rolling averages array to return
  let averages = [];

  // Loop through all of the data
  for (let i = 0; i < arr.length - windowPeriod + 1; i++) {
    // calculate the average for a window of data
    let sum = 0;
    for (let j = 0; j < windowPeriod; j++) {
      sum += arr[i + j];
    }
    // calculate the average and push it to the averages array
    averages.push(sum / windowPeriod);
  }
  return averages;
}



// function buildCharts() { 
  let graphdata = "/syria";
  d3.json(graphdata).then(function (data) {
    
    let names = data.data_id;
    let startDate = data.event_date.slice(1)[0];
    let endDate = data.event_date.slice(-1)[0];
    let dates = data.event_date;
    let fatalities = data.fatalities
    let rollingPeriod = 30;
    let rollingAvg = rollingAverage(fatalities, rollingPeriod);

    console.log(startDate);
    console.log(endDate);
    console.log(dates);

    let trace1 = {
        type: "scatter",
        mode: "lines",
        name: "Fatalities",
        x: dates,
        y: fatalities,
        line: {
            color: "#17BECF"
        }
    };

    let trace2 = {
        type: "scatter",
        mode: "lines",
        name: "Rolling Avg.",
        x: dates.slice(0, dates.length - rollingPeriod),
        y: rollingAvg
    };

    let data1 = [trace1, trace2];
    let layout = {
        title: "Fatalities in the Syrian Civil War",
        xaxis: {
            range: [startDate, endDate],
               type: "date"
            },
            yaxis: {
                autorange: true,
                type: "linear"
            },
    };
    Plotly.newPlot("plot1", data1, layout)

});




// Calculate a rolling average for an array
function rollingAverage(arr, windowPeriod = 10) {
  // rolling averages array to return
  let averages = [];

  // Loop through all of the data
  for (let i = 0; i < arr.length - windowPeriod + 1; i++) {
    // calculate the average for a window of data
    let sum = 0;
    for (let j = 0; j < windowPeriod; j++) {
      sum += arr[i + j];
    }
    // calculate the average and push it to the averages array
    averages.push(sum / windowPeriod);
  }
  return averages;
}



// function buildCharts() { 
  let graphdata = "/syria";
  d3.json(graphdata).then(function (data) {
    
    let names = data.data_id;
    let startDate = data.event_date.slice(1)[0];
    let endDate = data.event_date.slice(-1)[0];
    let dates = data.event_date;
    let fatalities = data.fatalities
    let rollingPeriod = 30;
    let rollingAvg = rollingAverage(fatalities, rollingPeriod);

    let trace1 = {
        type: "scatter",
        mode: "lines",
        name: "Fatalities",
        x: dates,
        y: fatalities,
        line: {
            color: "#17BECF"
        }
    };

    let trace2 = {
        type: "scatter",
        mode: "lines",
        name: "Rolling Avg.",
        x: dates.slice(0, dates.length - rollingPeriod),
        y: rollingAvg
    };

    let data1 = [trace1, trace2];
    let layout = {
        title: "Fatalities in the Syrian Civil War",
        xaxis: {
            range: [startDate, endDate],
               type: "date"
            },
            yaxis: {
                autorange: true,
                type: "linear"
            },
    };
    Plotly.newPlot("plot1", data1, layout)

});
// }



let graphdata2 = "/syria2";
d3.json(graphdata2).then(function (data) {
    
    let admin = data.admin1
    let fatalities = data.fatalities
    let sub_event_type = Object.values(data.sub_event_type);

    console.log(data.Idleb_fatalities);
    console.log(fatalities);
    console.log(sub_event_type);
    console.log(admin);


    // let data2 = [{
    //     type: 'bar',
    //     x: fatalities,
    //     y: sub_event_type,
    //     orientation: 'h'
    // }];
    
    let trace1 = {
        x: data.Idleb_fatalities,
        y: data.Idleb_sub_event_type,
        name: data.Idleb_admin1.slice(1)[0],
        orientation: 'h',
        marker: {
            color: 'rgba(55,128,191,0.6)',
            width: 1
        },
        type: 'bar'
    };

    let trace2 = {
        x: data.Hama_fatalities,
        y: data.Hama_sub_event_type,
        name: data.Hama_admin1.slice(1)[0],
        orientation: 'h',
        marker: {
            color: 'rgba(55,128,191,0.6)',
            width: 1
        },
        type: 'bar'
    };

    let trace3 = {
        x: data.DeirezZor_fatalities,
        y: data.DeirezZor_sub_event_type,
        name: data.DeirezZor_admin1.slice(1)[0],
        orientation: 'h',
        marker: {
            color: 'rgba(55,128,191,0.6)',
            width: 1
        },
        type: 'bar'
    };

    let trace4 = {
        x: data.AlHasakeh_fatalities,
        y: data.AlHasakeh_sub_event_type,
        name: data.AlHasakeh_admin1.slice(1)[0],
        orientation: 'h',
        marker: {
            color: 'rgba(55,128,191,0.6)',
            width: 1
        },
        type: 'bar'
    };

    let trace6 = {
        x: data.ArRaqqa_fatalities,
        y: data.ArRaqqa_sub_event_type,
        name: data.ArRaqqa_admin1.slice(1)[0],
        orientation: 'h',
        marker: {
            color: 'rgba(55,128,191,0.6)',
            width: 1
        },
        type: 'bar'
    };

    let trace7 = {
        x: data.Dara_fatalities,
        y: data.Dara_sub_event_type,
        name: data.Dara_admin1.slice(1)[0],
        orientation: 'h',
        marker: {
            color: 'rgba(55,128,191,0.6)',
            width: 1
        },
        type: 'bar'
    };

    let trace8 = {
        x: data.AsSweida_fatalities,
        y: data.AsSweida_sub_event_type,
        name: data.AsSweida_admin1.slice(1)[0],
        orientation: 'h',
        marker: {
            color: 'rgba(55,128,191,0.6)',
            width: 1
        },
        type: 'bar'
    };

    let trace9 = {
        x: data.Homs_fatalities,
        y: data.Homs_sub_event_type,
        name: data.Homs_admin1.slice(1)[0],
        orientation: 'h',
        marker: {
            color: 'rgba(55,128,191,0.6)',
            width: 1
        },
        type: 'bar'
    };

    let trace10 = {
        x: data.RuralDamascus_fatalities,
        y: data.RuralDamascus_sub_event_type,
        name: data.RuralDamascus_admin1.slice(1)[0],
        orientation: 'h',
        marker: {
            color: 'rgba(55,128,191,0.6)',
            width: 1
        },
        type: 'bar'
    };

    let trace11 = {
        x: data.Aleppo_fatalities,
        y: data.Aleppo_sub_event_type,
        name: data.Aleppo_admin1.slice(1)[0],
        orientation: 'h',
        marker: {
            color: 'rgba(55,128,191,0.6)',
            width: 1
        },
        type: 'bar'
    };

    let trace12 = {
        x: data.Damascus_fatalities,
        y: data.Damascus_sub_event_type,
        name: data.Damascus_admin1.slice(1)[0],
        orientation: 'h',
        marker: {
            color: 'rgba(55,128,191,0.6)',
            width: 1
        },
        type: 'bar'
    };

   let trace13 = {
       x: data.Quneitra_fatalities,
       y: data.Quneitra_sub_event_type,
       name: data.Quneitra_admin1.slice(1)[0],
       orientation: 'h',
       marker: {
           color: 'rgba(55,128,191,0.6)',
           width: 1
       },
       type: 'bar'
   };

   let trace14 = {
       x: data.Lattakia_fatalities,
       y: data.Lattakia_sub_event_type,
       name: data.Lattakia_admin1.slice(1)[0],
       orientation: 'h',
       marker: {
           color: 'rgba(55,128,191,0.6)',
           width: 1
       },
       type: 'bar'
   };

    let trace15 = {
        x: data.Tartous_fatalities,
        y: data.Tartous_sub_event_type,
        name: data.Tartous_admin1.slice(1)[0],
        orientation: 'h',
        marker: {
            color: 'rgba(55,128,191,0.6)',
            width: 1
        },
        type: 'bar'
    };

    let data3 = [trace1, trace2, trace3, trace4,
        trace6, trace7, trace8, trace9, trace10,
        trace11, trace12, trace13, trace14, trace15]

    let layout2 = {
        title: "Fatalities by Event Type",
        
        yaxis: {
            automargin: true
        },
    };


    Plotly.newPlot('plot2', data3, layout2);
});




<ul class="nav nav-tabs" id="myTab" role="tablist">
  <li class="nav-item">
    <a class="nav-link active" id="home-tab" data-toggle="tab" href="#home" role="tab" aria-controls="home" aria-selected="true">Home</a>
  </li>
  <li class="nav-item">
    <a class="nav-link" id="profile-tab" data-toggle="tab" href="#profile" role="tab" aria-controls="profile" aria-selected="false">Profile</a>
  </li>
  <li class="nav-item">
    <a class="nav-link" id="contact-tab" data-toggle="tab" href="#contact" role="tab" aria-controls="contact" aria-selected="false">Contact</a>
  </li>
</ul>
<div class="tab-content" id="myTabContent">
  <div class="tab-pane fade show active" id="home" role="tabpanel" aria-labelledby="home-tab">...</div>
  <div class="tab-pane fade" id="profile" role="tabpanel" aria-labelledby="profile-tab">...</div>
  <div class="tab-pane fade" id="contact" role="tabpanel" aria-labelledby="contact-tab">...</div>
</div>